---
import { QuickstartsFrontmatter } from "~/content/config"
interface Props {
  frontmatter: QuickstartsFrontmatter
}
const { frontmatter } = Astro.props

/** There's a bug with mdx and Astro where p tags on new lines add empty p tags around the content.
 * Unfortunately our linter / prettier automatically puts those tags on new lines for large blocks
 * and so I've added the quickstart content to prettierignore for now. */
---

<a class="back text-200" href="./">
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g id="navigation-arrow-left" clip-path="url(#clip0_1300_37647)">
      <g id="vector">
        <g filter="url(#filter0_i_1300_37647)">
          <path
            d="M11.999 1.50293C6.20004 1.50293 1.49902 6.20394 1.49902 12.0029C1.49902 17.8019 6.20003 22.5029 11.999 22.5029C17.798 22.5029 22.499 17.8019 22.499 12.0029C22.499 6.20394 17.798 1.50293 11.999 1.50293Z"
            fill="white"></path>
        </g>
        <path
          d="M11.999 1.50293C6.20004 1.50293 1.49902 6.20394 1.49902 12.0029C1.49902 17.8019 6.20003 22.5029 11.999 22.5029C17.798 22.5029 22.499 17.8019 22.499 12.0029C22.499 6.20394 17.798 1.50293 11.999 1.50293Z"
          stroke-width="1.5"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </g>
      <path
        id="vector_2"
        d="M7.49902 12.0029L16.499 12.0029"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
      <path
        id="vector_3"
        d="M11.249 15.7529L7.49903 12.0029L11.249 8.25293"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </g>
    <defs>
      <filter
        id="filter0_i_1300_37647"
        x="0.749023"
        y="0.75293"
        width="22.5"
        height="22.5"
        filterUnits="userSpaceOnUse"
        color-interpolation-filters="sRGB"
      >
        <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>
        <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"></feBlend>
        <feColorMatrix
          in="SourceAlpha"
          type="matrix"
          values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
          result="hardAlpha"></feColorMatrix>
        <feOffset dx="-3" dy="-1"></feOffset>
        <feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"></feComposite>
        <feColorMatrix type="matrix" values="0 0 0 0 0.87451 0 0 0 0 0.905882 0 0 0 0 0.984314 0 0 0 1 0"
        ></feColorMatrix>
        <feBlend mode="normal" in2="shape" result="effect1_innerShadow_1300_37647"></feBlend>
      </filter>
      <clipPath id="clip0_1300_37647">
        <rect width="24" height="24" fill="white" transform="translate(24 24) rotate(-180)"></rect>
      </clipPath>
    </defs>
  </svg>
  Back</a
>
<article id="article">
  <header>
    <h1 id="overview">{frontmatter.title}</h1>
    <h3>{frontmatter.summary}</h3>
  </header>
  <section id="content">
    <slot />
  </section>
</article>

<style>
  .back {
    display: flex;
    align-items: center;
    gap: var(--space-2x);
    color: var(--color-text-link);
    stroke: var(--color-text-link);
  }

  .back:hover {
    color: var(--color-text-link-hover);
    stroke: var(--color-text-link-hover);
  }

  article {
    margin-top: var(--space-10x);
  }

  header * {
    margin-bottom: 0;
    max-width: 640px;
  }

  header h3 {
    color: #252e42;
    font-size: 18px;
    font-weight: 400;
    line-height: 1.5;
    margin-top: var(--space-6x);
  }

  #content {
    margin-top: var(--space-20x);
  }

  #content :global(*) {
    margin-top: 0;
    margin-bottom: 0;
    max-width: 100%;
  }

  #content > :global(*) {
    margin-top: var(--space-6x);
  }

  #content :global(p + ul) {
    margin-top: 0;
  }

  #content :global(h2) {
    scroll-margin-top: var(--space-4x);
  }

  #content :global(li) {
    line-height: 1.5;
  }

  #content :global(ol) {
    padding-left: 0;
    counter-reset: counter;
  }

  #content :global(ol > li:first-of-type) {
    border-top: 1px solid var(--gray-300, #ced0d5);
  }

  #content :global(ol > li) {
    padding: var(--space-3x) 0px;
    border-bottom: 1px solid var(--gray-300, #ced0d5);
    list-style: none;
  }

  #content :global(details) {
    overflow: hidden;
  }

  #content :global(details > summary) {
    display: grid;
    grid-template-columns: 0 1fr auto;
    gap: var(--space-8x);
    cursor: pointer;
    color: var(--blue-800, #1a2b6b);
    font-size: 20px;
  }

  #content :global(details > summary::before) {
    content: counters(counter, ".") "";
    counter-increment: counter;
    color: var(--gray-400, #b7bac0);
    letter-spacing: -0.24px;
  }

  #content :global(details > summary::after) {
    content: url(/images/quickstarts/arrow-down.svg);
    -webkit-mask: url(/images/quickstarts/arrow-down.svg) no-repeat center;
    -webkit-mask-size: var(--space-6x);
    background-color: var(--gray-400, #b7bac0);
    transition: 0.25s transform ease;
  }

  /* Using custom attribute 'expanded' (created by Accordion)
  rather than 'open' since some browsers (Safari) have no respect for details attributes */
  #content :global(details[expanded] > summary::after) {
    transform: rotate(180deg);
    background-color: #174cc2;
  }

  #content :global(details > :not(summary)) {
    margin-top: 0;
    padding-left: var(--space-8x);
    padding-top: var(--space-6x);
  }

  #content :global(details > :not(summary):last-child) {
    padding-bottom: var(--space-3x);
  }
</style>

<script>
  import { Accordion } from "./accordion"

  document.querySelectorAll("details").forEach((el) => new Accordion(el))
</script>
