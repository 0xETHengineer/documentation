---
import { QuickstartBar } from "./QuickstartBar"

/** There's a bug with mdx and Astro where p tags on new lines add empty p tags around the content.
 * Unfortunately our linter / prettier automatically puts those tags on new lines for large blocks
 * and so I've added the quickstart content to prettierignore for now. */
---

<article id="article">
  <QuickstartBar client:only="preact" />
  <slot />
</article>

<style is:inline>
  #article {
    margin-top: var(--space-10x);
  }

  #article * {
    margin-top: 0;
    margin-bottom: 0;
    max-width: 100%;
  }

  #article section > * {
    margin-top: var(--space-5x);
  }

  #article p + ul {
    margin-top: 0;
  }

  #article section {
    margin-top: var(--space-10x);
    scroll-margin-top: calc(var(--space-4x) + var(--theme-navbar-height));
  }

  #article h2 {
    color: black;
    font-size: 20px;
    top: calc(var(--space-4x) + var(--theme-navbar-height));
    position: sticky;
    z-index: 2;
  }

  #article li {
    line-height: 1.5;
  }

  #article ul {
    list-style: none;
  }

  #article ul > li {
    position: relative;
    left: 0.5rem;
    padding-right: 1rem;
  }

  #article ul > li::before {
    position: absolute;
    content: "●";
    font-size: 0.5rem;
    top: 6.5px;
    left: -1rem;
  }

  #article ol.steps {
    padding-left: 0;
    counter-reset: counter;
  }

  #article ol.steps > li:first-of-type {
    border-top: 1px solid var(--gray-300, #ced0d5);
  }

  #article ol.steps > li {
    padding: var(--space-2x) 0px;
    border-bottom: 1px solid var(--gray-300, #ced0d5);
    list-style: none;
  }

  #article ol.steps details {
    overflow: hidden;
  }

  #article ol.steps details > summary {
    display: grid;
    grid-template-columns: 0 1fr auto;
    align-items: center;
    gap: var(--space-8x);
    cursor: pointer;
    color: var(--blue-800, #1a2b6b);
    font-size: 16px;
  }

  #article ol.steps details > summary::before {
    content: counters(counter, ".") "";
    counter-increment: counter;
    color: var(--gray-400, #b7bac0);
    letter-spacing: -0.24px;
  }

  #article ol.steps details > summary::after {
    content: url(/images/quickstarts/arrow-down.svg);
    -webkit-mask: url(/images/quickstarts/arrow-down.svg) no-repeat center;
    -webkit-mask-size: var(--space-6x);
    background-color: var(--gray-400, #b7bac0);
    transition: 0.25s transform ease;
  }

  /* Using custom attribute 'expanded' (created by Accordion)
  rather than 'open' since some browsers (Safari) have no respect for details attributes */
  #article ol.steps details[expanded] > summary::after {
    transform: rotate(180deg);
    background-color: #174cc2;
  }

  #article ol.steps details > :not(summary) {
    margin-top: 0;
    padding-left: var(--space-8x);
    padding-top: var(--space-6x);
  }

  #article ol.steps details > :not(summary):last-child {
    padding-bottom: var(--space-3x);
  }

  @media (min-width: 48em) {
    #article section > * {
      margin-top: var(--space-6x);
    }

    #article h2 {
      font-size: 28px;
      color: var(--blue-800, #1a2b6b);
    }

    #article ol.steps > li {
      padding: var(--space-3x) 0px;
    }

    #article ol.steps details > summary {
      font-size: 20px;
    }
  }

  /* NOTE: Done at 50em since mobile header appears at this point */
  @media (min-width: 50em) {
    #article section {
      margin-top: var(--space-6x);
      scroll-margin-top: var(--space-4x);
    }

    #article h2 {
      top: var(--space-4x);
    }
  }
</style>

<script>
  import { Accordion } from "./accordion"
  document.querySelectorAll("ol.steps details").forEach((el: HTMLDetailsElement) => new Accordion(el))

  // Wrap sections in <section> tags
  // Allows us to create sticky headers
  const children = document.querySelectorAll("article > *")
  for (var i = 0; i < children.length; i++) {
    if (children[i].nodeName === "H2") {
      const wrapper = document.createElement("section")
      wrapper.id = children[i].id
      children[i].parentNode!.insertBefore(wrapper, children[i])
      wrapper.appendChild(children[i])
      for (var j = i + 1; j < children.length; j++) {
        if (children[j].nodeName === "H2") {
          break
        }
        wrapper.appendChild(children[j])
      }
      i = j - 1
    }
  }

  // Create sticky background
  // const bg = document.createElement("div")
  // bg.id = "bg"
  // const article = document.getElementById("article")!
  // console.log(bg.clientHeight)
  // // TODO: Make responsive to window width changing
  // const title = children.item(0)
  // bg.style.height = `${title.clientHeight * 2.5}px`
  // bg.style.maxWidth = `${article.clientWidth}px`
  // const a = title.clientHeight * 2.5 + 24
  // bg.style.marginBottom = `-${a / 2}px`
  // bg.style.marginTop = `-${a / 2}px`
  // article.prepend(bg)
</script>
